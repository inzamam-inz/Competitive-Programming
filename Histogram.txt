ll forOneRow()
{
      // for ar[ sz ] array
      ll sz = sizeof ar;
 
      stack < pair < ll, ll > > sk, sr;
      ll left[ sz ], right[ sz ];
      memset( left, 0, sizeof left );
      memset( right, 0, sizeof right );
 
      for ( ll i = 0; i < sz; i++ ) {
            left[ i ] = -1;
            ll value = ar[ i ];
            while( sk.empty() == false && sk.top().second >= value )  sk.pop();
            if( sk.empty() == false ) left[ i ] = sk.top().first;
            sk.push( { i, value } );
      }
 
      for ( ll i = sz - 1; i >= 0; i-- ) {
            right[ i ] = sz;
            ll value = ar[ i ];
            while( sr.empty() == false && sr.top().second >= value )  sr.pop();
            if( sr.empty() == false ) right[ i ] = sr.top().first;
            sr.push( { i, value } );
      }
 
      ll res = 0;
      for ( ll i = 0; i < sz; i++ ) {
            if ( ( right[ i ] - left[ i ] - 1 ) * ar[ i ] )   res = max( 2 * ( ( right[ i ] - left[ i ] - 1 ) + ar[ i ] ), res );  // calculate part
      }
 
      return res;
}