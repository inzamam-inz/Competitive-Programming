1. Blog Link: https://codeforces.com/blog/entry/84150
Sum-Xor property: a + b = a ^ b + 2 * (a & b). Extended Version with two equations: 
        	a + b = a | b + a & b.
         	a ^ b = a | b - a & b.
Upto 1012 there can be at most 300 non-prime numbers between any two consecutive prime numbers.
Any number greater than 1 can be split into prime number(minimum number of prime):
if (isPrime(n))            ans = 1;
else if (n % 2 == 0)       ans = 2;
else if (isPrime(n - 2))   ans = 2;
else                       ans = 3;

Sometimes it is better to write a brute force / linear search solution because its overall complexity can be less.
When A≤B then ⌊B−1/A⌋ ≤ N ≤ ⌈B−1/A⌉ where N is the number of multiples of A between any two multiples of B.
Coordinate Compression Technique when value of numbers doesn't matter. It can be done with the help of mapping the shortest number to 1, next greater to 2 and so on.
Event method: When there is a problem in which two kinds of events are there (say start and end events), then you can give -ve values to start events and +ve values to end events, put them in a vector of pairs, sort them and then use as required.
When applying binary search on doubles / floats just run a loop upto 100 times instead of comparing l and r. It will make things easier.
For binary search you can also do binary lifting sort of thing, see for more details. (I don't know how to add that code without messing up the list, that's why the link: https://codeforces.com/blog/entry/84150?#comment-716582).
Sometimes, it is useful to visualize an array into a number of blocks to move towards a solution.
gcd(Fn,Fm)=Fgcd(n,m), where Fx is the xth fibonacci numbers and the first two terms are 0,1.

2. Should be noted:
gcd( a, b, c, d, e ) = gcd( a, a - b, b - c, c - d, d - e ).
      	So, gcd( a + x, b + x, c + x, d + x, e + x ) =  gcd( a + x, a - b, b - c, c - d, d - e ).
If you mean the number of independent cycles, for undirected graphs it is just edges minus vertices plus connected components (use DFS or BFS) but for directed graphs it's NP-hard.
Bit count:  __builtin_popcountll = long long
[1-N]^-1 % MOD
for ( int i = 2; i <= N; ++i )  
	   inv[ i ] = MOD - ( MOD / i ) * inv[ MOD % i ] % MOD;

Point A(x, y), B(x, y), C(x, y), ........
      	connected those points like A-C-B... / A-B-C.../.... such every angle < 90
     	Solution: Pick a point and find a point that has max distance from that point. then find a point
that has max distance from the last added point.
      	Problem link: https://codeforces.com/contest/1477/problem/C
Nth Fibonacci number = ceil(pow(goldenRatio, N) / sqrt(5)).
goldenRatio = (1 + sqrt(5)) / 2; 

Ordered_set: https://codeforces.com/blog/entry/11080
     	
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#set-
typedef tree <int, null_type, less <int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

ordered_set X;  
X.insert(/*1, 2, 4, 8, 16*/);
cout<<*X.find_by_order(1)<<endl; // 2
cout<<*X.find_by_order(2)<<endl; // 4
cout<<*X.find_by_order(4)<<endl; // 16
cout<<(end(X)==X.find_by_order(6))<<endl; // true

cout<<X.order_of_key(-5)<<endl;  // 0
cout<<X.order_of_key(1)<<endl;   // 0
cout<<X.order_of_key(3)<<endl;   // 2
cout<<X.order_of_key(4)<<endl;   // 2
cout<<X.order_of_key(400)<<endl; // 5

#multiset-
Main idea is to keep pairs like {elem,?id}.

typedef tree <pair <int, int>, null_type, less <pair <int, int> >, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
int t = 0;
ordered_set me;
me.insert({x, t++});
me.erase(me.lower_bound({x, 0}));
cout << me.order_of_key({x, 0}) << "\n";

