// collected from cp algorithm
struct state {
    int len, link, cnt, firstpos; // cnt -> endpos set size, link -> suffix link
    map <char, int> next;
};

const int MAXLEN = 100002;
state st[MAXLEN * 2];

struct SuffixAutomata {  // 0-based
    int sz, last;

    SuffixAutomata() { // init
        st[0].cnt = st[0].len = 0;
        st[0].link = -1;
        sz = 1, last = 0;
    }

    void add(char c) {  // add new char in automata
        int cur = sz++;
        st[cur].len = st[last].len + 1;
        st[cur].firstpos = st[cur].len - 1;
        st[cur].cnt = 1;
        int p = last;

        while (p != -1 && !st[p].next.count(c)) {
            st[p].next[c] = cur;
            p = st[p].link;
        }

        if (p == -1) {
            st[cur].link = 0;
        }
        else {
            int q = st[p].next[c];
            if (st[p].len + 1 == st[q].len) {
                st[cur].link = q;
            }
            else {  // clone state
                int clone = sz++;
                st[clone].len = st[p].len + 1;
                st[clone].next = st[q].next;
                st[clone].link = st[q].link;
                st[clone].firstpos = st[q].firstpos;
                st[clone].cnt = 0;

                while (p != -1 && st[p].next[c] == q) {
                    st[p].next[c] = clone;
                    p = st[p].link;
                }

                st[q].link = st[cur].link = clone;
            }
        }

        last = cur;
    }

    void occurrence() {  // calculate number of occurrences of all possible substring
        vector <int> rank(sz);
        iota(all(rank), 0);
        sort(all(rank), [&](int i, int j) {
            return st[i].len > st[j].len;
        });

        for (int ii : rank) if (st[ii].link != -1)
            st[st[ii].link].cnt += st[ii].cnt;
    }

    int count(string s) {  // number of occurrences of string s. #prerequisite ->  call occurrence()
        int node = 0;
        for (char ch : s) {
            if (!st[node].next.count(ch)) return 0;
            node = st[node].next[ch];
        }
        return st[node].cnt;
    }

    int firstOcc(string s) {  // first position(occurence) of string s
        int node = 0;
        for (char ch : s) {
            if (!st[node].next.count(ch)) return -1;
            node = st[node].next[ch];
        }
        return st[node].firstpos + 2 - (int)s.size();
    }

    void build(string S) {  // build suffix automata 
        for (char ch : S) add(ch);
    }

    bool find(string s) {   // find string s in automata
        int node = 0;
        for (char ch : s) {
            if (!st[node].next.count(ch)) return false;
            node = st[node].next[ch];
        }
        return true;
    }
};
