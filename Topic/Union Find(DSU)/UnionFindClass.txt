class UnionFind {
      public:
            vector < int > Par, Siz;
            int StartingGroupCount;
            UnionFind( int sz ) {
                  this->StartingGroupCount = sz;
                  for ( int i = 0; i < sz; ++i ) {
                        Par.push_back( i );
                        Siz.push_back( ?? );  */ 1 / 0 */
                  }
            }

            int FindRoot( int u ) {
                  if ( Par[ u ] != u )
                        Par[ u ] = FindRoot( Par[ u ] );

                  return Par[ u ];
            }

            void Merge( int u, int v ) {
                  if ( FindRoot( u ) != FindRoot( v ) ) {
                        if ( Siz[ Par[ u ] ] <= Siz[ Par[ v ] ] )   swap( u, v );

                        Siz[ Par[ u ] ] += Siz[ Par[ v ] ];
                        Par[ Par[ v ] ] = Par[ u ];
                  }
            }

            int GetMaxGroupSize() {
                  return *max_element( Siz.begin(), Siz.end() );
            }

            int GetNumberOfGroup() {
                  vector < bool > Yes( StartingGroupCount, false );
                  for ( int i = 0; i < StartingGroupCount; ++i ) { // ??
                      if ( Siz[ i ] == ?? )  Yes[ FindRoot( i ) ] = true;
                  }
                  return count( Yes.begin(), Yes.end(), true );
            }
};
